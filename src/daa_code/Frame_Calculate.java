/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package daa_code;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JM
 */
public class Frame_Calculate extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Frame_Calculate() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Combo_Calculate = new javax.swing.JComboBox<>();
        B_Menu = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        T_Calculate = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        CBCondition = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TFFare = new javax.swing.JTextField();
        TFSpeed = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        BtnCalculate = new javax.swing.JButton();

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Needed Condition:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Commuter's Guide Main");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Location:");

        Combo_Calculate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "San Mateo Rizal", "Antipolo City", "Para√±aque City", "Quezon City" }));
        Combo_Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo_CalculateActionPerformed(evt);
            }
        });

        B_Menu.setText("Menu");
        B_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_MenuActionPerformed(evt);
            }
        });

        T_Calculate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Routes", "Transportation", "Fare", "Speed"
            }
        ));
        jScrollPane1.setViewportView(T_Calculate);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Needed Condition:");

        CBCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fastest Route with Cheapest Fare", "Fastest Route", "Cheapest Fare", "Custom" }));
        CBCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBConditionActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Overall Fare:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Overall Travel Speed:");

        TFFare.setEditable(false);

        TFSpeed.setEditable(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("Calculation");

        jLabel7.setText("This helps you to identify the best Routes from your Location to the University based from your chosen condition.");

        BtnCalculate.setText("Calculate");
        BtnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCalculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Combo_Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BtnCalculate))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TFFare, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TFSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(B_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(324, 324, 324))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(10, 10, 10)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Combo_Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(CBCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(TFFare, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void B_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_MenuActionPerformed
        dispose();
        Frame_Menu Frame1 = new Frame_Menu();
        Frame1.setLocationRelativeTo(null);
        Frame1.setVisible(true);
    }//GEN-LAST:event_B_MenuActionPerformed

    private void Combo_CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo_CalculateActionPerformed
            
    }//GEN-LAST:event_Combo_CalculateActionPerformed

    private void CBConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBConditionActionPerformed
        
    }//GEN-LAST:event_CBConditionActionPerformed

    private void BtnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCalculateActionPerformed
        DefaultTableModel DTM_Calc =(DefaultTableModel)T_Calculate.getModel();
        File F_text = new File("C:\\Users\\JM\\Desktop\\Data.txt");
        DTM_Calc.setRowCount(0);//Removal of Rows
        String S_Condition =(String) CBCondition.getSelectedItem();
        try{
            BufferedReader BR = new BufferedReader(new FileReader(F_text));    //Setting File to BufferedReader
            String line=BR.readLine();
            String S_Location = Combo_Calculate.getSelectedItem().toString();            //Definition and Declaration
            char C_Location = S_Location.charAt(0); 
            String [] S_TblData = new String[4];   
            List<String> List_Routes = new ArrayList<>();
            List<String> List_Trans = new ArrayList<>();
            List<Float> List_Fare = new ArrayList<>();
            List<Integer> List_Speed = new ArrayList<>();
            List<Integer> List_LastTLoc = new ArrayList<>();    
            int I_LinesRead=0;
            int I_FinalDataLocation[]= new int[3];
            float F_CurrentFare;
            float F_BestFare=1000000;
            int I_CurrentSpeed;
            int I_BestSpeed=1000000;
            while(!(line.charAt(0)=='-'&&line.charAt(1)==C_Location)){   //Moving BufferedReader to Chosen Location    
                line=BR.readLine();  
            }
            line=BR.readLine();
            do{                                  //Acquiring Location's dataa
                S_TblData = line.split("/", 4);
                for(int i=0; i <4; i++){
                    S_TblData[i]=S_TblData[i].trim();
                }
                if(!S_TblData[0].isEmpty()){                         //Adding Routes to List
                    List_Routes.add(S_TblData[0]);
                    if(I_LinesRead>0){
                        List_LastTLoc.add(List_Trans.size()-1);   //Obtaining no. of transportation per route
                        I_LinesRead=0;
                    }
                }
                List_Trans.add(S_TblData[1]);
                List_Fare.add(Float.parseFloat(S_TblData[2]));
                List_Speed.add(Integer.parseInt(S_TblData[3]));
                I_LinesRead++;
                line=BR.readLine();          //Read next line
                if(line.charAt(0)=='='){                      //Obtain no. of transportation of last route
                    List_LastTLoc.add(List_Trans.size()-1);
                }
               }while(line.charAt(0)!='=');
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~FASTEST ROUTES WITH CHEAPEST FARE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(Objects.equals(S_Condition, "Fastest Route with Cheapest Fare")){
                List<Float> List_FareSpeedCombi = new ArrayList<>();   
                int I_FSCombiSize;
                float F_LowestCombi;
                for(int i=0; i<=List_LastTLoc.get(0);i++){      //Obtaining Speed-Fare Combination Scores 
                    for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                        for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                            List_FareSpeedCombi.add(((List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k))/50)+((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))/50));
                        }
                    }
                }
                I_FSCombiSize=List_FareSpeedCombi.size();
                F_LowestCombi = List_FareSpeedCombi.get(0);  
                for(int i=0;i<I_FSCombiSize;i++){              //Getting Lowest Score
                    if(F_LowestCombi>List_FareSpeedCombi.get(i)){
                        F_LowestCombi=List_FareSpeedCombi.get(i);
                    }
                }
                fastestcheapestloop:
                for(int i=0; i<=List_LastTLoc.get(0);i++){      //Obtaining Lowest Score Data
                    for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                        for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                            if((((List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k))/50)+((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))/50))==F_LowestCombi){
                                I_FinalDataLocation[0]=i; //Getting Locations of best score
                                I_FinalDataLocation[1]=j;
                                I_FinalDataLocation[2]=k;
                                TFFare.setText(Float.toString(List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k)));
                                TFSpeed.setText(Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))/60)+" hr/s "+Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))%60)+" min/s");
                                for(int z=0;z<3;z++){                 //Outputing Lowest Score Data
                                    S_TblData[0]=List_Routes.get(z);
                                    S_TblData[1]=List_Trans.get(I_FinalDataLocation[z]);
                                    S_TblData[2]=Float.toString(List_Fare.get(I_FinalDataLocation[z]));
                                    S_TblData[3]=Integer.toString(List_Speed.get(I_FinalDataLocation[z]));
                                    DTM_Calc.addRow(S_TblData);
                                }
                                 break fastestcheapestloop;
                            }
                        }
                    }
                }
            }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CUSTOM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(Objects.equals(S_Condition, "Custom")){
                int I_TempCustomFound=0;     //Declaration
                String S_FareLimitResponse = JOptionPane.showInputDialog(null, "Input Fare Limit");
                float F_FareLimitResponse = Float.parseFloat(S_FareLimitResponse); 
                String S_SpeedLimitResponse = JOptionPane.showInputDialog(null, "Input Speed Limit (in minutes)");
                int I_SpeedLimitResponse = Integer.parseInt(S_SpeedLimitResponse);
                for(int i=0; i<=List_LastTLoc.get(0);i++){      //Obtaining Speed and Fare within given Limits
                    for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                        for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                            I_CurrentSpeed = List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k);
                            F_CurrentFare= List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k);
                            if(I_CurrentSpeed<=I_SpeedLimitResponse&&F_CurrentFare<=F_FareLimitResponse){
                                if(I_CurrentSpeed<I_BestSpeed&&F_CurrentFare<F_BestFare){
                                    I_BestSpeed=I_CurrentSpeed; 
                                    F_BestFare=F_CurrentFare;
                                    I_TempCustomFound=1;
                                }
                            }
                        }
                    }
                }
                if(I_TempCustomFound==0)
                    JOptionPane.showMessageDialog(null, "No Combination of Routes found with the given Limits");
                else{
                    customloop:
                    for(int i=0; i<=List_LastTLoc.get(0);i++){      //Finding Speed and Fare data
                        for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                            for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                                if(I_BestSpeed==(List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))&&F_BestFare==(List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k))){
                                    I_FinalDataLocation[0]=i; //Getting Locations Speed/Fare
                                    I_FinalDataLocation[1]=j;
                                    I_FinalDataLocation[2]=k;
                                    TFFare.setText(Float.toString(List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k)));
                                    TFSpeed.setText(Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))/60)+" hr/s "+Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))%60)+" min/s");
                                    for(int z=0;z<3;z++){                 //Outputing Lowest Score Data
                                        S_TblData[0]=List_Routes.get(z);
                                        S_TblData[1]=List_Trans.get(I_FinalDataLocation[z]);
                                        S_TblData[2]=Float.toString(List_Fare.get(I_FinalDataLocation[z]));
                                        S_TblData[3]=Integer.toString(List_Speed.get(I_FinalDataLocation[z]));
                                        DTM_Calc.addRow(S_TblData);
                                    }
                                    break customloop;
                                }
                            }
                        }
                    }
                }
            }
   //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~FASTEST ROUTE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(Objects.equals(S_Condition, "Fastest Route")){
                for(int i=0; i<=List_LastTLoc.get(0);i++){      //Obtaining Speed and Fare within given Limits
                    for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                        for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                            I_CurrentSpeed = List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k);
                            if(I_CurrentSpeed<I_BestSpeed){
                                I_BestSpeed=I_CurrentSpeed;
                            }
                        }
                    }
                }
                fastestrouteloop:
                for(int i=0; i<=List_LastTLoc.get(0);i++){      //Finding Best Speed Data
                    for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                        for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                            if(I_BestSpeed==(List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))){
                                I_FinalDataLocation[0]=i; //Getting Locations Speed/Fare
                                I_FinalDataLocation[1]=j;
                                I_FinalDataLocation[2]=k;
                                TFFare.setText(Float.toString(List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k)));
                                TFSpeed.setText(Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))/60)+" hr/s "+Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))%60)+" min/s");
                                for(int z=0;z<3;z++){                 //Outputing Lowest Score Data
                                    S_TblData[0]=List_Routes.get(z);
                                    S_TblData[1]=List_Trans.get(I_FinalDataLocation[z]);
                                    S_TblData[2]=Float.toString(List_Fare.get(I_FinalDataLocation[z]));
                                    S_TblData[3]=Integer.toString(List_Speed.get(I_FinalDataLocation[z]));
                                    DTM_Calc.addRow(S_TblData);
                                }
                                break fastestrouteloop;
                            }
                        }
                    }
                }
            }
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CHEAPEST FARE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if(Objects.equals(S_Condition, "Cheapest Fare")){
                for(int i=0; i<=List_LastTLoc.get(0);i++){      //Obtaining Speed and Fare within given Limits
                    for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                        for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                            F_CurrentFare = List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k);
                            if(F_CurrentFare<F_BestFare){
                                F_BestFare=F_CurrentFare;
                            }
                        }
                    }
                }
                cheapestfareloop:
                for(int i=0; i<=List_LastTLoc.get(0);i++){      //Finding Best Speed Data
                    for(int j=List_LastTLoc.get(0)+1;j<=List_LastTLoc.get(1);j++){
                        for(int k=List_LastTLoc.get(1)+1;k<=List_LastTLoc.get(2);k++){
                            if(F_BestFare==(List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k))){
                                I_FinalDataLocation[0]=i; //Getting Locations Speed/Fare
                                I_FinalDataLocation[1]=j;
                                I_FinalDataLocation[2]=k;
                                TFFare.setText(Float.toString(List_Fare.get(i)+List_Fare.get(j)+List_Fare.get(k)));
                                TFSpeed.setText(Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))/60)+" hr/s "+Integer.toString((List_Speed.get(i)+List_Speed.get(j)+List_Speed.get(k))%60)+" min/s");
                                for(int z=0;z<3;z++){                 //Outputing Lowest Score Data
                                    S_TblData[0]=List_Routes.get(z);
                                    S_TblData[1]=List_Trans.get(I_FinalDataLocation[z]);
                                    S_TblData[2]=Float.toString(List_Fare.get(I_FinalDataLocation[z]));
                                    S_TblData[3]=Integer.toString(List_Speed.get(I_FinalDataLocation[z]));
                                    DTM_Calc.addRow(S_TblData);
                                }
                                break cheapestfareloop;
                            }
                        }
                    }
                }
                
            }
        }
        catch(IOException e){
            JOptionPane.showMessageDialog(null, "The program currently is in maintenance please exit the program");
        }
        catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Only put valid numbers. Only whole numbers for Speed Limit");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_BtnCalculateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame_Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame_Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame_Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame_Calculate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame_Calculate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_Menu;
    private javax.swing.JButton BtnCalculate;
    private javax.swing.JComboBox<String> CBCondition;
    private javax.swing.JComboBox<String> Combo_Calculate;
    private javax.swing.JTextField TFFare;
    private javax.swing.JTextField TFSpeed;
    private javax.swing.JTable T_Calculate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
